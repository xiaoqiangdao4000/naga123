{"version":3,"sources":["file:///C:/Users/zzx/Desktop/naga123/client/assets/script/hall/hall_message.ts"],"names":["_decorator","Component","ccclass","property","hall_message","_ws","start","connectServer","globalThis","update","deltaTime","getWebSocketState","readyState","closeWebSocket","close","printWebSocket","console","log","ws","WebSocket","onopen","onmessage","result","msg","JSON","parse","data","type","onMessage","eventTargets","emit","userMgr","userid","nickname","password","bindaccount","saveAccount","sendMssage","msgdata","stringify","send"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('hall_message')\r\nexport class hall_message extends Component {\r\n    _ws: WebSocket = null;\r\n\r\n    start() {\r\n        this.connectServer();\r\n        globalThis.hall_message = this;\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n\r\n    }\r\n\r\n    getWebSocketState() {\r\n        return this._ws.readyState;\r\n    }\r\n\r\n    closeWebSocket() {\r\n        //console.log('关闭连接前：this._ws = ', this._ws.readyState);\r\n        this._ws.close();\r\n        // console.log('关闭连接后：this._ws = ', this._ws.readyState);\r\n    }\r\n\r\n    printWebSocket() {\r\n        console.log('关闭连接前：this.readyState = ', this._ws.readyState);\r\n    }\r\n\r\n    //WebSocket.readyState:\r\n    //0--CONNECTING-套接字已创建。连接尚未打开\r\n    //1--OPEN--连接已打开并准备好进行通信。\r\n    //2--CLOSING--连接正在关闭。\r\n    //3--CLOSED--连接已关闭或无法打开。\r\n    connectServer() {\r\n        const ws = new WebSocket('ws://127.0.0.1:3001')\r\n        this._ws = ws;\r\n        ws.onopen = () => {\r\n            console.log('连接--大厅服务器--成功！');\r\n        }\r\n\r\n        ws.onmessage = (result) => {\r\n            let msg = JSON.parse(result.data);\r\n            let type = msg.type;\r\n            let data = msg.data;\r\n            this.onMessage(type, data);\r\n        }\r\n    }\r\n\r\n    onMessage(type, data) {\r\n        switch (type) {\r\n            case 'hall_bind_account':   //接受账号绑定消息\r\n                {\r\n                    if (data == 0) {\r\n                        globalThis.eventTargets.emit('hall_popTips', '绑定账号失败！');\r\n                        break;\r\n                    }\r\n                    console.log('bang = ', data);\r\n                    globalThis.userMgr.userid = data.userid;\r\n                    globalThis.userMgr.nickname = data.nickname;\r\n                    globalThis.userMgr.password = data.password;\r\n                    globalThis.userMgr.bindaccount = data.bindaccount;\r\n                    globalThis.userMgr.saveAccount(data.nickname, data.password);\r\n                    console.log('绑定账号成功!:' + data.userid + ' ,' + data.nickname + ' ,' + data.password + ' ,' + data.bindaccount);\r\n                    globalThis.eventTargets.emit('hall_popTips', '绑定账号--成功--');\r\n                    break;\r\n                }\r\n            case 'hall_notice_msg':\r\n                {\r\n                    console.log('收到大厅通知消息 = ', data);\r\n                    break;\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    sendMssage(type: any, data: any) {\r\n        let msg = {\r\n            type: type,\r\n            data: data,\r\n        }\r\n        let msgdata = JSON.stringify(msg);\r\n        this._ws.send(msgdata);\r\n    }\r\n}\r\n\r\n\r\n"]}