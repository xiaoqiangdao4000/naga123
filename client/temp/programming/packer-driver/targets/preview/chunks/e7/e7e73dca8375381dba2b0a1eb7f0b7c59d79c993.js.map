{"version":3,"sources":["file:///Users/zzx/Desktop/naga123/client/assets/script/sgj/game_sgj.ts"],"names":["_decorator","Component","HTTP","ccclass","property","game_sgj","betScore","betData_C","type","data","bigSmall_C","bigSmall_S","iswin","bigsmall","wins_core","user_score","gameEnd_S","step","area","tiems","record","eventid","event_count","event_step","event_area","event_times","event_score","start","console","log","globalThis","curgame","update","deltaTime","onMessage","sendMssage","msg","getInstance","send","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AACdC,MAAAA,I;;;;;;;;;OACD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;0BAGjBK,Q,WADZF,OAAO,CAAC,UAAD,C,gBAAR,MACaE,QADb,SAC8BJ,SAD9B,CACwC;AAAA;AAAA;AAAA,eAOpCK,QAPoC,GAOf,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAPe;AAAA,eAUpCC,SAVoC,GAWhC;AACIC,YAAAA,IAAI,EAAE,uBADV;AAEIC,YAAAA,IAAI,EAAE,KAAKH;AAFf,WAXgC;AAAA,eAiBpCI,UAjBoC,GAkBhC;AACIF,YAAAA,IAAI,EAAE,oBADV;AAEIC,YAAAA,IAAI,EAAE,CAFV,CAEa;;AAFb,WAlBgC;AAAA,eAwBpCE,UAxBoC,GAyBhC;AACIH,YAAAA,IAAI,EAAE,oBADV;AAEII,YAAAA,KAAK,EAAE,CAFX;AAEiB;AACbC,YAAAA,QAAQ,EAAE,CAHd;AAGiB;AACbC,YAAAA,SAAS,EAAE,CAJf;AAIkB;AACdC,YAAAA,UAAU,EAAE,CALhB,CAKkB;;AALlB,WAzBgC;AAAA,eAkCpCC,SAlCoC,GAmChC;AACIR,YAAAA,IAAI,EAAE,mBADV;AAEIS,YAAAA,IAAI,EAAE,CAFV;AAEgB;AACZC,YAAAA,IAAI,EAAE,CAHV;AAGgB;AACZC,YAAAA,KAAK,EAAE,CAJX;AAKIL,YAAAA,SAAS,EAAE,CALf;AAMIC,YAAAA,UAAU,EAAE,CANhB;AAOIK,YAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAPZ;AAOwC;AAEpCC,YAAAA,OAAO,EAAE,CATb;AASyB;AACrBC,YAAAA,WAAW,EAAE,CAVjB;AAWIC,YAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAXhB;AAW2B;AACvBC,YAAAA,UAAU,EAAE,CAZhB;AAYyB;AACrBC,YAAAA,WAAW,EAAE,CAbjB;AAayB;AACrBC,YAAAA,WAAW,EAAE,CAdjB,CAcyB;;AAdzB,WAnCgC;AAAA;;AAoDpCC,QAAAA,KAAK,GAAG;AACJC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,KAAKtB,SAA7B;AACAuB,UAAAA,UAAU,CAACC,OAAX,GAAqB,IAArB;AACH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB,CA3DmC,CA6DpC;;;AACAC,QAAAA,SAAS,CAAC1B,IAAD,EAAOC,IAAP,EAAa;AAClBmB,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBpB,IAAxB;AACH,SAhEmC,CAkEpC;;;AACA0B,QAAAA,UAAU,CAAC3B,IAAD,EAAYC,IAAZ,EAAuB;AAC7B,cAAI2B,GAAG,GAAG;AACN5B,YAAAA,IAAI,EAAEA,IADA;AAENC,YAAAA,IAAI,EAAEA;AAFA,WAAV;AAIA;AAAA;AAAA,4BAAK4B,WAAL,GAAmBC,IAAnB,CAAwBC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAAxB;AACH;;AAzEmC,O","sourcesContent":["import { _decorator, Component, Node, SpriteFrame, Sprite, resources, Prefab, instantiate } from 'cc';\nimport HTTP from '../utils/HTTP';\nconst { ccclass, property } = _decorator;\n\n@ccclass('game_sgj')\nexport class game_sgj extends Component {\n\n    //     //用户下注\n    // typedef struct \n    // {\n    //     LONGLONG\t\tlJettonScore[8];\t\t\t\t\t\t//加注数目\n    // }CMD_C_SGJ_PlaceJetton;\n    betScore: number[] = [0, 0, 0, 0, 0, 0, 0, 0]\n\n    //客户端消息----下注\n    betData_C =\n        {\n            type: 'CMD_C_SGJ_PlaceJetton',\n            data: this.betScore,\n        }\n\n    //客户端消息----猜大小,//猜大小，0为小（0-7），1为大（8-15）\n    bigSmall_C =\n        {\n            type: 'CMD_C_SGJ_BigSmall',\n            data: 0, //赌注\n        }\n\n    //服务端消息----猜大小\n    bigSmall_S =\n        {\n            type: 'CMD_S_SGJ_BigSmall',\n            iswin: 0,    //猜大小成功 0失败，1成功。\n            bigsmall: 0, //大小的实际数值\n            wins_core: 0, //玩家成绩\n            user_score: 0,//玩家积分\n        }\n\n    //服务端消息----开奖       \n    gameEnd_S =\n        {\n            type: 'CMD_S_SGJ_GameEnd',\n            step: 0,    //开奖格子\n            area: 0,    //开奖区域\n            tiems: 0,\n            wins_core: 0,\n            user_score: 0,\n            record: [0, 0, 0, 0, 0, 0, 0, 0],   //历史记录\n\n            eventid: 0,          //事件id\n            event_count: 0,\n            event_step: [0, 1],    //开奖格子,数组[24]\n            event_area: 0,       //开奖区域,数组[24]\n            event_times: 0,      //倍数,数组[24]\n            event_score: 0,      //当前赢分,数组[24]\n        }\n\n    start() {\n        console.log('betScore', this.betData_C);\n        globalThis.curgame = this;\n    }\n\n    update(deltaTime: number) {\n\n    }\n\n    //接受消息\n    onMessage(type, data) {\n        console.log('收到服务器消息：', data);\n    }\n\n    //发送消息\n    sendMssage(type: any, data: any) {\n        let msg = {\n            type: type,\n            data: data,\n        }\n        HTTP.getInstance().send(JSON.stringify(msg));\n    }\n}"]}