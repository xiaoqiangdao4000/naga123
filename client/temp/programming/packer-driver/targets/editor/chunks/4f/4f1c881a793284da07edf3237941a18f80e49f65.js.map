{"version":3,"sources":["file:///Users/zzx/Desktop/naga123/client/assets/script/utils/websocket.ts"],"names":["_decorator","Component","ccclass","property","websocket","getInstance","instance","constructor","_ws","onmessage_callback","start","console","log","update","deltaTime","connectServer","ip","port","addr","ws","WebSocket","onopen","onmessage","result","msg","JSON","parse","data","type","onMessage","globalThis","curgame","sendMssage","send","stringify"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;;;;;;;;OACf;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;2BAGjBI,S,WADZF,OAAO,CAAC,WAAD,C,2BAAR,MACaE,SADb,SAC+BH,SAD/B,CACyC;AAKnB,eAAXI,WAAW,GAAG;AACjB,cAAI,KAAKC,QAAL,IAAiB,IAArB,EAA2B;AACvB,iBAAKA,QAAL,GAAgB,IAAIF,SAAJ,EAAhB;AACA,mBAAO,KAAKE,QAAZ;AACH,WAHD,MAIK;AACD,mBAAO,KAAKA,QAAZ;AACH;AACJ;;AAEDC,QAAAA,WAAW,GAAG;AACV;AADU,eAbdC,GAac,GAbH,IAaG;AAAA,eAZdC,kBAYc,GAZO,IAYP;AAEb;;AAEDC,QAAAA,KAAK,GAAG;AACJC,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CACzB;;AAEDC,QAAAA,aAAa,CAACC,EAAD,EAAKC,IAAL,EAAW;AACpB;AACA,cAAIC,IAAI,GAAG,UAAUF,EAAV,GAAe,GAAf,GAAqBC,IAAhC;AACA,gBAAME,EAAE,GAAG,IAAIC,SAAJ,CAAcF,IAAd,CAAX;AACA,eAAKV,GAAL,GAAWW,EAAX;;AACAA,UAAAA,EAAE,CAACE,MAAH,GAAY,MAAM;AACdV,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,WAFD;;AAIAO,UAAAA,EAAE,CAACG,SAAH,GAAgBC,MAAD,IAAY;AACvB,gBAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACI,IAAlB,CAAV;AACA,gBAAIC,IAAI,GAAGJ,GAAG,CAACI,IAAf;AACA,gBAAID,IAAI,GAAGH,GAAG,CAACG,IAAf;AACA,iBAAKE,SAAL,CAAeD,IAAf,EAAqBD,IAArB;AACH,WALD;AAMH;;AAEDE,QAAAA,SAAS,CAACD,IAAD,EAAOD,IAAP,EAAa;AAElB,cAAIG,UAAU,CAACC,OAAf,EAAwB;AACpBD,YAAAA,UAAU,CAACC,OAAX,CAAmBF,SAAnB,CAA6BD,IAA7B,EAAmCD,IAAnC;AACA;AACH;;AAED,kBAAQC,IAAR;AACI,iBAAK,YAAL;AACI;AAEI;AACH;;AACL,iBAAK,cAAL;AACI;AAEI;AACH;;AACL;AACI;AAZR,WAPkB,CAqBlB;;AACH;;AAEDI,QAAAA,UAAU,CAACJ,IAAD,EAAYD,IAAZ,EAAuB;AAC7B,cAAIH,GAAG,GAAG;AACNI,YAAAA,IAAI,EAAEA,IADA;AAEND,YAAAA,IAAI,EAAEA;AAFA,WAAV;;AAIA,eAAKnB,GAAL,CAASyB,IAAT,CAAcR,IAAI,CAACS,SAAL,CAAeV,GAAf,CAAd;AACH;;AAzEoC,O,UACvBlB,Q,GAAW,I","sourcesContent":["import { _decorator, Component, Node, director } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('websocket')\nexport class websocket extends Component {\n    public static instance = null;\n    _ws: any = null;\n    onmessage_callback = null;\n\n    static getInstance() {\n        if (this.instance == null) {\n            this.instance = new websocket();\n            return this.instance;\n        }\n        else {\n            return this.instance;\n        }\n    }\n\n    constructor() {\n        super();\n    }\n\n    start() {\n        console.log('websocket onstart')\n    }\n\n    update(deltaTime: number) {\n    }\n\n    connectServer(ip, port) {\n        //'ws://127.0.0.1:3000'\n        let addr = 'ws://' + ip + ':' + port;\n        const ws = new WebSocket(addr);\n        this._ws = ws;\n        ws.onopen = () => {\n            console.log('连接--游戏服务器--成功！');\n        }\n\n        ws.onmessage = (result) => {\n            let msg = JSON.parse(result.data);\n            let type = msg.type;\n            let data = msg.data;\n            this.onMessage(type, data);\n        }\n    }\n\n    onMessage(type, data) {\n\n        if (globalThis.curgame) {\n            globalThis.curgame.onMessage(type, data);\n            return;\n        }\n\n        switch (type) {\n            case 'guestLogin':\n                {\n\n                    break;\n                }\n            case 'accountLogin':\n                {\n\n                    break;\n                }\n            default:\n                break;\n        }\n        // console.log('接受到服务器消息:' + type + ',数据:' + data);\n    }\n\n    sendMssage(type: any, data: any) {\n        let msg = {\n            type: type,\n            data: data,\n        }\n        this._ws.send(JSON.stringify(msg));\n    }\n}"]}