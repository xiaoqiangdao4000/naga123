{"version":3,"sources":["file:///Users/zzx/Desktop/naga123/client/assets/script/utils/HTTP.ts"],"names":["HTTP","sys","Url","url","master_url","token","getInstance","instance","sendRequest1","xhr","XMLHttpRequest","onreadystatechange","readyState","status","response","responseText","console","log","onerror","evt","open","isNative","setRequestHeader","send","sendRequest","path","data","handler","extraUrl","timeout","sendpath","sendtext","k","requestURL","encodeURI","respText","ret","JSON","parse","e","errcode","errmsg"],"mappings":"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","sourcesContent":["import { sys } from \"cc\";\n\nexport default class HTTP {\n    public Url = 'http://127.0.0.1:3000';\n    public url = this.Url;\n    public master_url = this.Url;\n    public token = null;\n\n    public static instance = null;\n\n    static getInstance() {\n        if (this.instance == null) {\n            this.instance = new HTTP();\n            return this.instance;\n        }\n        else {\n            return this.instance;\n        }\n    }\n\n    sendRequest1() {\n        //访问地址\n        let url = \"http://127.0.0.1:3000/guest?nickname=123&name=321\";\n        //新建Http\n        let xhr = new XMLHttpRequest();\n        //接收数据\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\n                var response = xhr.responseText;\n                console.log('收到服务器消息 = ', response);\n            }\n        };\n        //错误处理\n        xhr.onerror = function (evt) {\n            console.log('错误处理:', evt);\n        }\n\n\n        //初始化一个请求，GET方式，true异步请求\n        xhr.open(\"GET\", url, true);\n\n        if (sys.isNative) {\n            // xhr.setRequestHeader(\"Accept-Encoding\", \"gzip,deflate\", \"text/html;charset=UTF-8\");\n            console.log('本地机器---')\n            xhr.setRequestHeader('Accept-Encoding', 'gzip,deflate');\n        }\n\n        //\n\n        //发送请求\n        xhr.send();\n    }\n\n    sendRequest(path, data, handler, extraUrl) {\n        //var xhr = cc.loader.getXMLHttpRequest();\n        var xhr = new XMLHttpRequest();\n        xhr.timeout = 5000;\n\n        if (data == null) {\n            data = {};\n        }\n        if (this.token) {\n            data.token = this.token;\n        }\n\n        if (extraUrl == null) {\n            extraUrl = this.url;\n            console.log(\"修改后的extraUrl\", extraUrl);\n        }\n\n        //解析请求路由以及格式化请求参数\n        var sendpath = path;\n        var sendtext = '?';\n        for (var k in data) {\n            if (sendtext != \"?\") {\n                sendtext += \"&\";\n            }\n            sendtext += (k + \"=\" + data[k]);\n        }\n\n        //组装完整的URL\n        var requestURL = extraUrl + sendpath + encodeURI(sendtext);\n\n        //发送请求\n        console.log(\"RequestURL:\" + requestURL);\n        xhr.open(\"GET\", requestURL, true);\n\n        if (sys.isNative) {\n            //xhr.setRequestHeader(\"Accept-Encoding\", \"gzip,deflate\", \"text/html;charset=UTF-8\");\n            xhr.setRequestHeader(\"Accept-Encoding\", \"gzip,deflate,text/html,charset=UTF-8\");\n            //xhr.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');\n            //xhr.setRequestHeader('Content-Type', 'application/json;charset=utf-8');\n        }\n\n\n\n        // var timer = setTimeout(function () {\n        //     xhr.abort();\n        //     console.log('http timeout');\n        //     retryFunc();\n        // }, 5000);\n\n        // var retryFunc = function () {\n        //     console.log('重连：');\n        //     HTTP.getInstance().sendRequest(path, data, handler, extraUrl);\n        // };\n\n        xhr.onreadystatechange = function () {\n            console.log(\"onreadystatechange\");\n            // clearTimeout(timer);\n            if (xhr.readyState === 4 && (xhr.status >= 200 && xhr.status < 300)) {\n                // console.log(\"http res(\" + xhr.responseText.length + \"):\" + xhr.responseText);\n                //cc.log(\"request from [\" + xhr.responseURL + \"] data [\", ret, \"]\");\n                var respText = xhr.responseText;\n\n                var ret = null;\n                try {\n                    ret = JSON.parse(respText);\n                    console.log(\"服务端返回的结果为\", ret);\n                } catch (e) {\n                    console.log(\"err:\" + e);\n                    ret = {\n                        errcode: -10001,\n                        errmsg: e\n                    };\n                }\n\n                if (handler) {\n                    handler(ret);\n                }\n\n                handler = null;\n            } else if (xhr.readyState === 4) {\n                // if (xhr.hasRetried) {\n                //     return;\n                // }\n\n                console.log('111other readystate == 4' + ', status:' + xhr.status);\n                return;\n                // setTimeout(function () {\n                //     retryFunc();\n                // }, 5000);\n                // return;\n            }\n            else {\n                console.log('222other readystate:' + xhr.readyState + ', status:' + xhr.status);\n            }\n        };\n\n        xhr.send();\n\n        // try {\n        //     xhr.send();\n        // } catch (e) {\n        //setTimeout(retryFunc, 200);\n        //retryFunc();\n        // }\n\n        return xhr;\n    };\n}\n"]}